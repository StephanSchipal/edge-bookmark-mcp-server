[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "edge-bookmark-mcp-server"
version = "1.0.0"
description = "FastMCP server for Microsoft Edge bookmark management with advanced search, analytics, and export capabilities"
authors = [
    {name = "Stephan Schipal", email = "stephanschipal@hotmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities"
]
keywords = ["mcp", "fastmcp", "edge", "bookmarks", "browser", "search", "analytics"]

dependencies = [
    "fastmcp>=2.10.1",
    "rapidfuzz>=3.6.0", 
    "watchdog>=3.0.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "jinja2>=3.1.0",
    "psutil>=5.9.0",
    "urllib3>=2.0.0",
    "python-dateutil>=2.8.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
excel = ["openpyxl>=3.1.0"]
performance = ["orjson>=3.8.0", "uvloop>=0.17.0"]

[project.urls]
Homepage = "https://github.com/stephanschipal/edge-bookmark-mcp-server"
Repository = "https://github.com/stephanschipal/edge-bookmark-mcp-server"
Documentation = "https://github.com/stephanschipal/edge-bookmark-mcp-server/blob/main/README.md"
Issues = "https://github.com/stephanschipal/edge-bookmark-mcp-server/issues"

[project.scripts]
edge-bookmark-server = "src.server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing", 
    "--cov-report=html",
    "--strict-markers",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]